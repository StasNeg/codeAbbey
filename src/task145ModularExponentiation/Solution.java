package task145ModularExponentiation;

/**
 * Created by Stanislav on 10.03.2018.
 */
public class Solution {
    public static void main(String[] args) {
        String[] data = {
                "317878076 1221810864 306860453",
                "356176287 1703990959 273073877",
                "221508298 1453727249 298937839",
                "689920744 1863942367 306971051",
                "105196699 1377755836 150181741",
                "537138635 1493624201 289382459",
                "751730935 1243325306 352451377",
                "266415488 1268502382 387940979",
                "832850515 1740483712 269682059",
                "406121496 1630224697 180417527",
                "200567322 1989098359 213442739",
                "810125734 1107806237 265629677",
                "773628335 1568808414 307090829",
                "372729647 1399946977 387668917",
                "648161398 1886384599 213582997",
                "426753755 1381869618 290051539",
                "678318136 1978146961 319162897",
                "501753181 1501610559 273073877",
                "527420892 1793379336 219299357",
                "210172313 1904933667 194103401",
                "239993646 1413419710 306891199",
                "748346089 1626131690 180242243",
                "709842848 1024257717 265824007"
        };
        for (String s : data) {
            String [] splitted = s.split(" ");
            long x = Long.parseLong(splitted[0]);
            long b = Long.parseLong(splitted[1]);
            long n = Long.parseLong(splitted[2]);
            System.out.print(exp(x,b,n)+ " ");
        }
    }

    private static long exp(long x, long b, long n) {
        if(b==1){
            return x%n;
        }
        if((b&1)==1){
            return ((x%n)*exp(x,b-1,n)%n);
        }
        long ans = exp(x, b/2,n);
        return (ans*ans)%n;
    }
}
